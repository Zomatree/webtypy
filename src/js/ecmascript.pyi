from typing import Callable, ClassVar, Generic, Iterator, TypeVar, TypedDict, NotRequired, overload, Any, Self

T = TypeVar("T")

globalThis: Any
Infinity: float
NaN: float
undefined: None

def eval(script: str) -> Any: ...
def isFinite(testValue: Any) -> bool: ...

class Object:
    def __init__(self, value: Any) -> None: ...

    prototype: Any
    def hasOwnProperty(self, prop: str) -> bool: ...
    def isPrototypeOf(self, object: Any) -> bool: ...
    def propertyIsEnumerable(self, object: str) -> bool: ...
    def toLocaleString(self) -> str: ...
    def toString(self) -> str: ...
    def valueOf(self) -> Any: ...

class Function(Object):
    @overload
    def __init__(self, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: str, arg6: str, functionBody: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: str, arg6: str, arg7: str, functionBody: str) -> None: ...

    constructor: ClassVar[Function]
    length: ClassVar[int]
    name: ClassVar[str]

    @overload
    def apply(self, thisArg: Any) -> Any: ...
    @overload
    def apply(self, argsArray: list[Any]) -> Any: ...

    def bind(self, thisArg: Any, *args: Any) -> Function: ...
    def call(self, thisArg: Any, *args: Any) -> Any: ...

    def __call__(self, *args: Any) -> Any:
        ...

class Boolean(Function):
    def __init__(self, value: Any) -> None: ...

class Symbol(Function):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, description: str) -> None: ...

    description: str | None

class ArrayBufferOptions(TypedDict):
    maxByteLength: NotRequired[int]


class Error(Function):
    cause: str
    message: str

class ArrayBuffer(Function):
    @overload
    def __init__(self, length: int) -> None: ...
    @overload
    def __init__(self, length: int, options: ArrayBufferOptions) -> None: ...

    byteLength: int
    maxByteLength: int
    resizable: bool

    @classmethod
    def isView(cls, value: Any) -> bool: ...
    def resize(self, newLength: int) -> None: ...
    @overload
    def slice(self, begin: int) -> Self: ...
    @overload
    def slice(self, begin: int, end: int) -> Self: ...

class AsyncValue(Object):
    done: bool
    value: Any

class AsyncGenerator(Function):
    @overload
    def next(self) -> Promise[AsyncValue]: ...
    @overload
    def next(self, value: Any) -> Promise[AsyncValue]: ...

    def _return(self, value: Any) -> Promise[AsyncValue]: ...
    def throw(self, exception: Any) -> Promise[AsyncValue]: ...

class Promise(Function, Generic[T]):
    @staticmethod
    def all(iterable: Iterator[Promise[T]]) -> Promise[T]: ...
    @staticmethod
    def allSettled(iterable: Iterator[Promise[T]]) -> Promise[T]: ...
    @staticmethod
    def any(iterable: Iterator[Promise[T]]) -> Promise[T]: ...
    @staticmethod
    def race(iterable: Iterator[Promise[T]]) -> Promise[T]: ...
    @staticmethod
    def reject(reason: Any) -> Promise[T]: ...
    @staticmethod
    def resolve(reason: Any) -> Promise[T]: ...

    def catch(self, onRejected: Callable[[Any], None]) -> Self: ...
    def _finally(self, onFinally: Callable[[], None]) -> Self: ...
    @overload
    def then(self, onFulfilled: Callable[[T], Any]) -> Self: ...
    @overload
    def then(self, onFulfilled: Callable[[T], Any], onRejected: Callable[[T], Any]) -> Self: ...
